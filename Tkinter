import tkinter as tk
from tkinter import ttk
import json


FONTE_GRANDE = ('Verdana', 12)


def save_exit():
    
    menu_lojas = 0
    menu_produtos = 0
    
    original = json.dumps(lojas, sort_keys = True, indent = 4)
    with open('estoque.json','w') as est:
        est.write(original)
#    ControleEstoque.quit()
            
    
    
with open('estoque.json', 'r') as est:
    lojas = json.loads(est.read())    


class ControleEstoque(tk.Tk):
    
    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)
        container = tk.Frame(self)
        container.pack(side='top', fill='both', expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        
        self.frames = {}
        
        for F in (Menu_lojas, Choose, Menu_Estoque, Add_Store, Relatorios, Alterar, Del_Store, Add_prod,
                  Imprimir_Estoque, Negativo, Money_Estoque, Preco, Alt_Quant, Quant, Del_Prod,
                  ProdutoDeletado, ConfirmarProduto, LojaDeletada, ConfirmarLoja):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky='nsew')
        
        self.show_frames(Menu_lojas)
        
    def show_frames(self, cont):
        frame = self.frames[cont]
        frame.tkraise()
        
class Menu_lojas(tk.Frame):
    
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Menu Inicial', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.sair = ttk.Button( self, text="          Sair          ",  
                                command=save_exit)
        self.sair.pack(side='bottom')

        self.choose = ttk.Button(self, text="  Escolher Loja  ",
                                 command=lambda:controller.show_frames(Choose))  # cria o botao de escolher loja
        self.choose.pack(side='top')

        self.add_loja = ttk.Button(self, text=" Adicionar Loja ",
                                   command=lambda:controller.show_frames(Add_Store))  # cria o botao de add loja
        self.add_loja.pack(side='top')
        
        self.del_loja = ttk.Button(self, text="   Deletar Loja   ", 
                                   command=lambda:controller.show_frames(Del_Store))
        self.del_loja.pack(side='top')  #cria o botao de deletar loja
        
    
    
class Choose(tk.Frame):
    
    def __init__(self, parent, controller):
        
        menu_lojas = 2
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Escolha de Unidade', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self, textvariable=self.conteudo_label)

        self.escolha_loja = tk.StringVar()
        
        unidade = tk.Entry(self)
        unidade.configure(textvariable=self.escolha_loja)
        unidade.pack()
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(Menu_Estoque))
        self.confirmar.pack(side='top')
        
        if unidade not in lojas:
            pass
        
    def Enviar(self):
        self.conteudo_label.set(self.escolha_loja.get())
        
        
class Add_Store(tk.Frame):
    
    def __init__(self, parent, controller):
        
        menu_lojas = 1
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Adicionar nova Unidade', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self, textvariable=self.conteudo_label)
       

        self.escolha_loja = tk.StringVar()
        
        unidade = tk.Entry(self)
        unidade.configure(textvariable=self.escolha_loja)
        unidade.pack()
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(Menu_Estoque))
        self.confirmar.pack(side='top')
        
    def Enviar(self):
        self.conteudo_label.set(self.escolha_loja.get())
       
        
class Del_Store(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_lojas = 3
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Deletar Loja', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self, textvariable=self.conteudo_label)
       

        self.escolha_loja = tk.StringVar()
        
        unidade = tk.Entry(self)
        unidade.configure(textvariable=self.escolha_loja)
        unidade.pack()
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(ConfirmarLoja))
        self.confirmar.pack(side='top')
    
    def Enviar(self):
        self.conteudo_label.set(self.escolha_loja.get())
        
        
        
unidade = 'ta quase'

class Menu_Estoque(tk.Frame):
    
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Controle de Estoque da loja {0}'.format(unidade) , font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
    
        self.sair = ttk.Button( self, text="             Sair             ",  
                                command=save_exit)
        self.sair.pack(side='bottom')
        
        self.add_prod = ttk.Button(self, text='Adicionar Produto',
                                   command=lambda:controller.show_frames(Add_prod))
        self.add_prod.pack(side='top')
        
        
        self.alt_prod = ttk.Button(self, text='   Alterar Produto  ', 
                                   command=lambda:controller.show_frames(Alterar))
        self.alt_prod.pack(side='top')
        
        
        self.del_prod = ttk.Button(self, text='  Deletar Produto  ',
                                   command=lambda:controller.show_frames(Del_Prod))
        self.del_prod.pack(side='top')
        
        
        self.relatorio = ttk.Button(self, text='       Relatórios       ',
                                command=lambda:controller.show_frames(Relatorios))
        self.relatorio.pack(side='top')
        
        self.voltar = ttk.Button(self, text='           Voltar          ',
                                command=lambda:controller.show_frames(Menu_lojas))
        self.voltar.pack(side='top')
        
    
 
class Add_prod(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_produtos = 1
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Produto a ser adicionado ', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        
        self.nome_produto_entrada = tk.StringVar()
        label = tk.Label(self, textvariable=self.nome_produto_entrada)
        
        self.nome_produto = tk.StringVar()
        
        produto = tk.Entry(self)
        produto.configure(textvariable=self.nome_produto)
        produto.pack()
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(Quant))
        self.confirmar.pack(side='top')
    
    def Enviar(self):
        self.conteudo_label.set(self.escolha_loja.get())
    
class Alterar(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_produtos = 3
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Alterar Itens' , font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.voltar = ttk.Button(self, text='Voltar', 
                                 command=lambda:controller.show_frames(Menu_Estoque))
        self.voltar.pack(side='bottom')
        
        
        self.add_prod = ttk.Button(self, text='Alterar Quantidade', 
                                   command=lambda:controller.show_frames(Alt_Quant))
        self.add_prod.pack(side='top')
        
        
        self.change_price = ttk.Button(self, text='      Alterar Preço     ', 
                                       command=lambda:controller.show_frames(Preco))
        self.change_price.pack(side='top')
        
    
class Relatorios(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_produtos = 4
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Menu de Relatorios' , font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.voltar = ttk.Button(self, text='       Voltar      ',
                                 command=lambda:controller.show_frames(Menu_Estoque))
        self.voltar.pack(side='bottom')
        
        
        self.est = ttk.Button(self, text='        Imprimir Estoque       ',
                              command=lambda:controller.show_frames(Imprimir_Estoque))
        self.est.pack(side='top')
        
        
        self.negativo = ttk.Button(self, text='Lista de Produtos em falta',
                                   command=lambda:controller.show_frames(Negativo))
        self.negativo.pack(side='top')
        
        
        self.money = ttk.Button(self, text='   Valor total em estoque   ',
                                command=lambda:controller.show_frames(Money_Estoque))
        self.money.pack(side='top')


class Imprimir_Estoque(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_relatorios = 1
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Estoque atualizado' , font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.voltar = ttk.Button(self, text='Voltar',
                                 command=lambda:controller.show_frames(Relatorios))
        self.voltar.pack(side='bottom')
    

class Negativo(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_relatorios = 2
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Produtos em falta' , font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.voltar = ttk.Button(self, text='Voltar',
                                 command=lambda:controller.show_frames(Relatorios))
        self.voltar.pack(side='bottom')
        

class Money_Estoque(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_relatorios = 3
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Total monetário em estoque' , font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.voltar = ttk.Button(self, text='Voltar',
                                 command=lambda:controller.show_frames(Relatorios))
        self.voltar.pack(side='bottom')
        
class Alt_Quant(tk.Frame):
    def __init__(self, parent, controller):
        
        altera = 'quantidade'
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Quantidade adicionada ou removida', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self, textvariable=self.conteudo_label)
       
        self.quantidade = tk.StringVar()
        
        quant = tk.Entry(self)
        quant.configure(textvariable=self.quantidade)
        quant.pack()
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(Menu_Estoque))
        self.confirmar.pack(side='top')
        
        
class Preco(tk.Frame):
    def __init__(self, parent, controller):
        
        altera = 'preço'
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Preço do Produto', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self, textvariable=self.conteudo_label)
       
        self.quantidade = tk.StringVar()
        
        quant = tk.Entry(self)
        quant.configure(textvariable=self.quantidade)
        quant.pack()    
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(Menu_Estoque))
        self.confirmar.pack(side='top')
        
class Quant(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Quantidade inicial do Produto', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self, textvariable=self.conteudo_label)
       
        self.quantidade = tk.StringVar()
        
        quant = tk.Entry(self)
        quant.configure(textvariable=self.quantidade)
        quant.pack()
    
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(Preco))
        self.confirmar.pack(side='top')
        
        

class Del_Prod(tk.Frame):
    def __init__(self, parent, controller):
        
        menu_produtos = 2
        
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Deletar Produto', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        
        self.conteudo_label = tk.StringVar()
        label = tk.Label(self , textvariable=self.conteudo_label)
       

        self.escolha_loja = tk.StringVar()
        
        unidade = tk.Entry(self)
        unidade.configure(textvariable=self.escolha_loja)
        unidade.pack()
        
        self.confirmar = ttk.Button(self, text='Confirmar', 
                                    command=lambda:controller.show_frames(ConfirmarProduto))
        self.confirmar.pack(side='top')
    
    def Enviar(self):
        self.conteudo_label.set(self.escolha_loja.get())

class ConfirmarLoja(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Você tem certeza que deseja deletar essa loja', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.sim = ttk.Button(self, text='Sim',
                              command=lambda:controller.show_frames(LojaDeletada))
        self.sim.pack(side='top')
        self.nao = ttk.Button(self, text='Não',
                              command=lambda:controller.show_frames(Menu_lojas))
        self.nao.pack(side='top')

class LojaDeletada(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Loja deletada', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        self.ok = ttk.Button(self, text='Beleza Mano, idai???',
                             command=lambda:controller.show_frames(Menu_lojas))
        self.ok.pack(side='top')


class ConfirmarProduto(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Você tem certeza que deseja deletar esse produto', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        
        self.sim = ttk.Button(self, text='Sim',
                              command=lambda:controller.show_frames(ProdutoDeletado))
        self.sim.pack(side='top')
        self.nao = ttk.Button(self, text='Não',
                              command=lambda:controller.show_frames(Menu_Estoque))
        self.nao.pack(side='top')


class ProdutoDeletado(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='Produto deletado', font=FONTE_GRANDE)
        label.pack(pady=10,padx=10)
        self.ok = ttk.Button(self, text='Beleza Mano, idai???',
                             command=lambda:controller.show_frames(Menu_Estoque))
        self.ok.pack(side='top')

app = ControleEstoque()
app.mainloop()
        
